[project]
name = "voinux"
version = "1.0.0"
description = "Privacy-focused, offline-capable voice typing solution for Linux with GPU-accelerated speech recognition"
readme = "README.md"
authors = [
    {name = "Voinux Contributors"}
]
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["voice", "speech-recognition", "transcription", "whisper", "linux", "accessibility"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]

dependencies = [
    "faster-whisper>=1.0.0",
    "torch>=2.0.0",
    "soundcard>=0.4.2",
    "pyaudio>=0.2.13",
    "webrtcvad>=2.0.10",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "PyQt6>=6.6.0",
    "qasync>=0.27.0",
]

[project.optional-dependencies]
cuda = [
    "nvidia-cublas-cu12",
    "nvidia-cudnn-cu12",
]
rocm = [
    # ROCm PyTorch must be installed separately from pytorch.org
    # See: https://pytorch.org/get-started/locally/ for ROCm installation
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
    "ruff>=0.9.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
voinux = "voinux.cli.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=voinux --cov-report=term-missing"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
# Allow untyped decorators (needed for Click CLI decorators)
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["webrtcvad", "faster_whisper", "faster_whisper.*", "soundcard", "qasync", "click", "rich", "rich.*", "PyQt6", "PyQt6.*", "numpy", "numpy.*", "torch", "torch.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["voinux.cli.*"]
# Ignore untyped decorators from Click
disable_error_code = ["misc"]

[[tool.mypy.overrides]]
module = ["voinux.gui.*"]
# GUI code has some unavoidable type issues with Qt and qasync
disable_error_code = ["no-untyped-def", "no-untyped-call", "union-attr", "type-arg", "misc"]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "W",      # pycodestyle warnings
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PL",     # pylint
    "PERF",   # perflint (performance)
    "RUF",    # ruff-specific rules
    "A",      # flake8-builtins (shadowing)
    "PT",     # flake8-pytest-style
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TRY",    # tryceratops (exception handling)
]
ignore = [
    "E501",      # line too long (handled by formatter)
    "TRY003",    # avoid specifying long messages outside exception class
    "TRY301",    # abstract raise to inner function (too verbose)
    "PLR0913",   # too many arguments
    "PLR0915",   # too many statements (complexity, requires refactoring)
    "PLR0912",   # too many branches (complexity, requires refactoring)
    "PLR2004",   # magic value comparison (style preference)
    "PLC0415",   # import outside top-level (often intentional for lazy loading)
]

[tool.ruff.lint.per-file-ignores]
"voinux/gui/**/*.py" = ["N802"]  # Qt methods must use camelCase

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[dependency-groups]
dev = [
    "types-click>=7.1.8",
    "types-pyyaml>=6.0.12.20250915",
]
